{"version":3,"file":"prepare.js","sourceRoot":"","sources":["../src/prepare.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseChangeLogOrExit } from './change-parser.js';\nimport { readFileSync, writeFileSync } from 'node:fs';\nimport type { Solution } from './plan.js';\nimport { planVersionBumps, saveSolution } from './plan.js';\nimport fsExtra from 'fs-extra';\nimport { getPublishablePackageNames } from './interdep.js';\n\nconst { readJSONSync, writeJSONSync } = fsExtra;\n\nconst changelogPreamblePattern = /#.*Changelog.*$/i;\n\nexport function updateChangelog(\n  newChangelogContent: string,\n  solution: Solution,\n): string {\n  const targetChangelogFile = './CHANGELOG.md';\n  const oldChangelogContent = readFileSync(targetChangelogFile, 'utf8').split(\n    '\\n',\n  );\n\n  if (!changelogPreamblePattern.test(oldChangelogContent[0])) {\n    process.stderr.write(\n      `Cannot parse existing changelog. Expected it to match:\\n${changelogPreamblePattern}\\n`,\n    );\n    process.exit(-1);\n  }\n\n  const [firstNewLine, ...restNewLines] = newChangelogContent\n    .trim()\n    .split('\\n');\n\n  const newOutput =\n    firstNewLine +\n    '\\n\\n' +\n    versionSummary(solution) +\n    '\\n' +\n    restNewLines.join('\\n') +\n    '\\n';\n  writeFileSync(\n    targetChangelogFile,\n    oldChangelogContent[0] +\n      '\\n\\n' +\n      newOutput +\n      oldChangelogContent.slice(1).join('\\n'),\n  );\n  return newOutput;\n}\n\nfunction versionSummary(solution: Solution): string {\n  const result: string[] = [];\n  for (const [pkgName, entry] of solution) {\n    if (entry.impact) {\n      result.push(`${pkgName} ${entry.newVersion} (${entry.impact})`);\n    }\n  }\n  return result.join('\\n');\n}\n\nfunction updateVersions(solution: Solution) {\n  for (const entry of solution.values()) {\n    if (entry.impact) {\n      const pkg = readJSONSync(entry.pkgJSONPath);\n      pkg.version = entry.newVersion;\n      writeJSONSync(entry.pkgJSONPath, pkg, { spaces: 2 });\n    }\n  }\n}\n\nexport async function prepare(\n  newChangelogContent: string,\n  singlePackage?: string,\n) {\n  const publishableNames = getPublishablePackageNames('./');\n  const changes = parseChangeLogOrExit(newChangelogContent, publishableNames);\n  const solution = planVersionBumps(changes, singlePackage);\n  updateVersions(solution);\n  const description = updateChangelog(newChangelogContent, solution);\n  saveSolution(solution, description);\n  return solution;\n}\n"]}