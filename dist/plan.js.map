{"version":3,"file":"plan.js","sourceRoot":"","sources":["../src/plan.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Impact, ParsedChangelog } from './change-parser.js';\nimport { publishedInterPackageDeps } from './interdep.js';\nimport { assertNever } from 'assert-never';\nimport semver from 'semver';\nimport { highlightMarkdown } from './highlight.js';\nimport chalk from 'chalk';\nimport { resolve } from 'path';\nimport fsExtra from 'fs-extra';\n\nconst { inc, satisfies } = semver;\n\nconst { existsSync, readJSONSync, writeJSONSync } = fsExtra;\n\nexport type Solution = Map<\n  string,\n  | { impact: undefined; oldVersion: string }\n  | {\n      impact: Impact;\n      oldVersion: string;\n      newVersion: string;\n      constraints: { impact: Impact; reason: string }[];\n      pkgJSONPath: string;\n    }\n>;\n\nclass Plan {\n  #constraints: Map<string, { impact: Impact; reason: string }[]>;\n  #pkgs: ReturnType<typeof publishedInterPackageDeps>;\n\n  constructor() {\n    this.#pkgs = publishedInterPackageDeps();\n\n    // initialize constraints for every published package\n    const constraints = new Map<string, { impact: Impact; reason: string }[]>();\n    for (const pkg of this.#pkgs.keys()) {\n      constraints.set(pkg, []);\n    }\n    this.#constraints = constraints;\n  }\n\n  addConstraint(packageName: string, impact: Impact, reason: string): void {\n    const pkgConstraints = this.#constraints.get(packageName);\n    if (!pkgConstraints) {\n      console.warn(chalk.yellow(`Warning: unknown package \"${packageName}\"`));\n      return;\n    }\n    if (\n      !pkgConstraints.some(\n        (existing) => existing.impact === impact && existing.reason === reason,\n      )\n    ) {\n      pkgConstraints.push({ impact, reason });\n      this.#propagate(packageName, impact);\n    }\n  }\n\n  solve(): Solution {\n    const solution: Solution = new Map();\n    for (const [pkgName, entry] of this.#pkgs) {\n      const constraints = this.#constraints.get(pkgName)!;\n      const impact = this.#sumImpact(constraints);\n      if (!impact) {\n        solution.set(pkgName, { impact: undefined, oldVersion: entry.version });\n      } else {\n        const newVersion = inc(entry.version, impact)!;\n        solution.set(pkgName, {\n          impact,\n          oldVersion: entry.version,\n          newVersion,\n          constraints,\n          pkgJSONPath: entry.pkgJSONPath,\n        });\n      }\n    }\n    return solution;\n  }\n\n  #expandWorkspaceRange(\n    range: `workspace:${string}`,\n    availableVersion: string,\n  ): string {\n    // this implements PNPM's rules for how workspace: protocol dependencies get\n    // expanded into proper semver ranges.\n    switch (range) {\n      case 'workspace:*':\n        return availableVersion;\n      case 'workspace:~':\n        return `~${availableVersion}`;\n      case 'workspace:^':\n        return `^${availableVersion}`;\n      default:\n        return range.slice(10);\n    }\n  }\n\n  #propagate(packageName: string, impact: Impact) {\n    const entry = this.#pkgs.get(packageName)!;\n    const minNewVersion = inc(entry.version, impact)!;\n    for (const [consumerName, workspaceRange] of entry.isDependencyOf) {\n      this.#propagateDep(\n        packageName,\n        minNewVersion,\n        'dependencies',\n        consumerName,\n        workspaceRange,\n      );\n    }\n    for (const [consumerName, workspaceRange] of entry.isPeerDependencyOf) {\n      this.#propagateDep(\n        packageName,\n        minNewVersion,\n        'peerDependencies',\n        consumerName,\n        workspaceRange,\n      );\n    }\n  }\n\n  #propagateDep(\n    packageName: string,\n    minNewVersion: string,\n    section: 'dependencies' | 'peerDependencies',\n    consumerName: string,\n    workspaceRange: `workspace:${string}`,\n  ) {\n    const entry = this.#pkgs.get(packageName)!;\n\n    const oldRange = this.#expandWorkspaceRange(workspaceRange, entry.version);\n    if (!satisfies(minNewVersion, oldRange)) {\n      switch (section) {\n        case 'dependencies':\n          this.addConstraint(\n            consumerName,\n            'patch',\n            `Has dependency ${'`'}${workspaceRange}${'`'} on ${packageName}`,\n          );\n          break;\n        case 'peerDependencies':\n          this.addConstraint(\n            consumerName,\n            'major',\n            `Has peer dependency ${'`'}${workspaceRange}${'`'} on ${packageName}`,\n          );\n          break;\n        default:\n          throw assertNever(section);\n      }\n    }\n  }\n\n  #sumImpact(impacts: { impact: Impact }[]): Impact | undefined {\n    if (impacts.some((i) => i.impact === 'major')) {\n      return 'major';\n    }\n    if (impacts.some((i) => i.impact === 'minor')) {\n      return 'minor';\n    }\n    if (impacts.some((i) => i.impact === 'patch')) {\n      return 'patch';\n    }\n  }\n}\n\nfunction impactLabel(impact: Impact | undefined, text?: string) {\n  switch (impact) {\n    case undefined:\n      return chalk.gray(text);\n    case 'patch':\n      return chalk.blueBright(text);\n    case 'minor':\n      return chalk.greenBright(text);\n    case 'major':\n      return chalk.redBright(text);\n  }\n}\n\nfunction capitalize(s: string): string {\n  return s[0].toUpperCase() + s.slice(1);\n}\n\nexport function explain(solution: Solution) {\n  const output: string[] = [];\n\n  for (const priority of ['major', 'minor', 'patch'] as const) {\n    if ([...solution].some((entry) => entry[1].impact === priority)) {\n      output.push(impactLabel(priority, capitalize(priority)));\n      output.push('');\n\n      for (const [pkgName, entry] of solution) {\n        if (entry.impact === priority) {\n          output.push(\n            `  ${impactLabel(entry.impact, pkgName)} from ${\n              entry.oldVersion\n            } to ${entry.newVersion}`,\n          );\n          for (const constraint of entry.constraints) {\n            if (constraint.impact === entry.impact) {\n              output.push(`   - ${constraint.reason}`);\n            }\n          }\n        }\n      }\n      output.push('');\n    }\n  }\n\n  if ([...solution].some((entry) => entry[1].impact === undefined)) {\n    output.push(impactLabel(undefined, 'Unreleased'));\n    output.push('');\n    for (const [pkgName, entry] of solution) {\n      if (entry.impact === undefined) {\n        output.push(`## ${pkgName}`);\n        output.push(`  ${impactLabel(entry.impact, pkgName)} unchanged`);\n      }\n    }\n    output.push('');\n  }\n\n  return output.join('\\n');\n}\n\nexport function planVersionBumps(\n  changed: ParsedChangelog,\n  singlePackage?: string,\n): Solution {\n  const plan = new Plan();\n  for (const section of changed.sections) {\n    if ('unlabeled' in section) {\n      process.stderr.write(\n        highlightMarkdown(\n          `# Unlabeled Changes\\n\\n${section.summaryText}\\n\\n*Cannot plan release until the above changes are labeled*.\\n`,\n        ),\n      );\n      process.exit(-1);\n    }\n\n    if (singlePackage) {\n      plan.addConstraint(\n        singlePackage,\n        section.impact,\n        `Appears in changelog section ${section.heading}`,\n      );\n    } else {\n      for (const pkg of section.packages) {\n        plan.addConstraint(\n          pkg,\n          section.impact,\n          `Appears in changelog section ${section.heading}`,\n        );\n      }\n    }\n  }\n\n  return plan.solve();\n}\n\nfunction solutionFile(): string {\n  return resolve('./.release-plan.json');\n}\n\nexport function saveSolution(solution: Solution, description: string): void {\n  writeJSONSync(\n    solutionFile(),\n    { solution: Object.fromEntries(solution), description },\n    { spaces: 2 },\n  );\n}\n\nexport function loadSolution(): { solution: Solution; description: string } {\n  try {\n    if (!existsSync(solutionFile())) {\n      const err = new Error(`No such file ${solutionFile()}`);\n      (err as any).code = 'ENOENT';\n      throw err;\n    }\n    const json = readJSONSync(solutionFile());\n    return {\n      solution: new Map(Object.entries(json.solution)),\n      description: json.description,\n    };\n  } catch (err) {\n    process.stderr.write(\n      `Unable to load release plan file. You must run \"embroider-release prepare\" first to create the file.\\n`,\n    );\n    if (err.code !== 'ENOENT') {\n      console.error(err);\n    }\n    process.exit(-1);\n  }\n}\n"]}