{"version":3,"file":"publish.js","sourceRoot":"","sources":["../src/publish.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,aAAa,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,WAAW,MAAM,sBAAsB,CAAC;AAC/C,OAAO,cAAc,MAAM,uBAAuB,CAAC;AACnD,OAAO,OAAO,MAAM,UAAU,CAAC;AAE/B,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;AAU/B,KAAK,UAAU,YAAY;IACzB,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAChE,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,MAAM,CAAC,OAAe,EAAE,KAA6B;IAC5D,OAAO,IAAI,KAAK,CAAC,UAAU,IAAI,OAAO,EAAE,CAAC;AAC3C,CAAC;AAED,SAAS,IAAI,CAAC,OAAe;IAC3B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,OAAO,EAAE,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,OAAO,CAAC,OAAe;IAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,OAAO,OAAO,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,OAAO,aAAa;IACxB,SAAS,GAAG,KAAK,CAAC;IAClB,aAAa,CAAC,OAAe;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;CACF;AAED,KAAK,UAAU,YAAY,CAAC,GAAW;IACrC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,KAAK,EAAE;QACpC,WAAW;QACX,QAAQ;QACR,QAAQ;QACR,IAAI;QACJ,GAAG;KACJ,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;AAC9B,CAAC;AAED,KAAK,UAAU,QAAQ,CACrB,QAAkB,EAClB,QAAuB,EACvB,OAAuB;IAEvB,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,QAAQ,EAAE;QACvC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACjB,SAAS;SACV;QACD,IAAI;YACF,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAEvC,MAAM,WAAW,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC;YAE5C,IAAI,WAAW,EAAE;gBACf,IAAI,CAAC,YAAY,GAAG,oCAAoC,OAAO,EAAE,CAAC,CAAC;gBACnE,OAAO;aACR;YAED,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,IAAI,CAAC,uCAAuC,GAAG,IAAI,CAAC,CAAC;gBACrD,SAAS;aACV;YAED,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;gBAC/B,GAAG;gBACH,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,QAAQ,CAAC,aAAa,CAAC,4BAA4B,OAAO,EAAE,CAAC,CAAC;SAC/D;KACF;AACH,CAAC;AAED,KAAK,UAAU,QAAQ,CAAC,QAAuB,EAAE,OAAuB;IACtE,IAAI,OAAO,CAAC,MAAM,EAAE;QAClB,IAAI,CAAC,+CAA+C,CAAC,CAAC;QACtD,OAAO;KACR;IAED,IAAI;QACF,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;KACxC;IAAC,OAAO,GAAG,EAAE;QACZ,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;KAC9C;AACH,CAAC;AAED,SAAS,uBAAuB,CAAC,QAAkB;IACjD,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,QAAQ,EAAE;QACvC,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SAC/B;KACF;IACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;IACjE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC;AAED,KAAK,UAAU,OAAO;IACpB,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC;QAC7C,KAAK,EAAE,CAAC,oBAAoB,CAAC;KAC9B,CAAC,CAAC;IAEH,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;IAED,MAAM,MAAM,GAAG,cAAc,CAC1B,cAAc,CAAC,OAAO,CAAC,UAA8B,CAAC,GAAG,CAC3D,CAAC;IAEF,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IAED,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC;IAC5B,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAC/B,CAAC;AAED,KAAK,UAAU,gBAAgB,CAC7B,OAAgB,EAChB,OAAe,EACf,QAAuB;IAEvB,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC;YACnD,KAAK;YACL,IAAI;YACJ,GAAG,EAAE,OAAO;SACb,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC;KAChC;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,QAAQ,CAAC,aAAa,CACpB,oDAAoD,CACrD,CAAC;KACH;AACH,CAAC;AAED,KAAK,UAAU,mBAAmB,CAChC,OAAgB,EAChB,WAAmB,EACnB,OAAe,EACf,QAAuB,EACvB,OAAuB;IAEvB,IAAI;QACF,MAAM,WAAW,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEvE,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,4BAA4B,OAAO,kBAAkB,CAAC,CAAC;YAC5D,OAAO;SACR;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CACF,8DAA8D,OAAO,EAAE,CACxE,CAAC;YACF,OAAO;SACR;QAED,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,EAAE,CAAC;QAExC,MAAM,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC;YAChC,KAAK;YACL,IAAI;YACJ,QAAQ,EAAE,OAAO;YACjB,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC;KACJ;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,QAAQ,CAAC,aAAa,CAAC,uCAAuC,CAAC,CAAC;KACjE;AACH,CAAC;AAED,KAAK,UAAU,gBAAgB,CAC7B,OAAe,EACf,OAAe,EACf,QAAuB;IAEvB,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;KACxB;IAAC,OAAO,GAAG,EAAE;QACZ,IACE,GAAG,CAAC,IAAI,KAAK,sBAAsB;YACnC,GAAG,CAAC,IAAI,KAAK,sBAAsB,EACnC;YACA,OAAO,KAAK,CAAC;SACd;QAED,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,QAAQ,CAAC,aAAa,CAAC,iDAAiD,CAAC,CAAC;KAC3E;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,QAAkB,EAClB,QAAuB,EACvB,OAAuB,EACvB,cAAsB;IAEtB,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAE5C,IAAI,OAAO,CAAC,GAAG,EAAE;QACf,IAAI,CAAC,IAAI,CAAC,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;KACnC;IAED,IAAI,OAAO,CAAC,aAAa,EAAE;QACzB,IAAI,CAAC,IAAI,CAAC,oBAAoB,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,OAAO,CAAC,GAAG,EAAE;QACf,IAAI,CAAC,IAAI,CAAC,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;KACnC;IAED,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAE3B,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,QAAQ,EAAE;QACvC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACjB,SAAS;SACV;QAED,MAAM,WAAW,GAAG,MAAM,gBAAgB,CACxC,OAAO,EACP,KAAK,CAAC,UAAU,EAChB,QAAQ,CACT,CAAC;QAEF,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,GAAG,OAAO,uCAAuC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,SAAS;SACV;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CACF,+BAA+B,cAAc,2BAC3C,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,EACtC,UAAU,OAAO,iCAAiC,KAAK,CAAC,UAAU,EAAE,CACrE,CAAC;YAEF,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;YACxC,SAAS;SACV;QAED,IAAI;YACF,MAAM,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE;gBAChC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC;gBAC/B,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,QAAQ,CAAC,aAAa,CACpB,aAAa,cAAc,YAAY,OAAO,aAAa,GAAG,CAAC,OAAO,EAAE,CACzE,CAAC;SACH;KACF;IAED,OAAO;QACL,IAAI;QACJ,QAAQ;KACT,CAAC;AACJ,CAAC;AAED,SAAS,cAAc;IACrB,IAAI,UAAU,CAAC,kBAAkB,CAAC,EAAE;QAClC,OAAO,MAAM,CAAC;KACf;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,IAAoB;IAChD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;QAC7B,IAAI,CAAC,CAAC,MAAM,YAAY,EAAE,CAAC,EAAE;YAC3B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;;CAE1B,CAAC,CAAC;YACG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAClB;KACF;IAED,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,YAAY,EAAE,CAAC;IAEjD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE;QAC5B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACvD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB;IAED,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE/D,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAE5D,8EAA8E;IAC9E,4EAA4E;IAC5E,WAAW;IACX,MAAM,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;IAErC,MAAM,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACzC,MAAM,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;IAC7D,MAAM,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC/B,MAAM,mBAAmB,CACvB,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,QAAQ,EACR,IAAI,CACL,CAAC;IAEF,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;QACzE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB;SAAM;QACL,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,CAAC,6DAA6D,CAAC,CAAC;YACvE,OAAO;SACR;QAED,OAAO,CAAC,gCAAgC,CAAC,CAAC;KAC3C;AACH,CAAC","sourcesContent":["import execa from 'execa';\nimport type { Solution } from './plan.js';\nimport { loadSolution } from './plan.js';\nimport { Octokit } from '@octokit/rest';\nimport latestVersion from 'latest-version';\nimport { dirname } from 'path';\nimport PackageJson from '@npmcli/package-json';\nimport parseGithubUrl from 'parse-github-repo-url';\nimport fsExtra from 'fs-extra';\n\nconst { existsSync } = fsExtra;\n\ntype PublishOptions = {\n  skipRepoSafetyCheck?: boolean;\n  dryRun?: boolean;\n  otp?: string;\n  publishBranch?: string;\n  tag?: string;\n};\n\nasync function hasCleanRepo(): Promise<boolean> {\n  const result = await execa('git', ['status', '--porcelain=v1']);\n  return result.stdout.length === 0;\n}\n\nfunction tagFor(pkgName: string, entry: { newVersion: string }): string {\n  return `v${entry.newVersion}-${pkgName}`;\n}\n\nfunction info(message: string) {\n  process.stdout.write(`\\n ‚ÑπÔ∏è ${message}`);\n}\n\nfunction success(message: string) {\n  process.stdout.write(`\\n üéâ ${message} üéâ\\n`);\n}\n\nexport class IssueReporter {\n  hadIssues = false;\n  reportFailure(message: string): void {\n    this.hadIssues = true;\n    process.stderr.write(message);\n  }\n}\n\nasync function doesTagExist(tag: string) {\n  const { stdout } = await execa('git', [\n    'ls-remote',\n    '--tags',\n    'origin',\n    '-l',\n    tag,\n  ]);\n\n  return stdout.trim() !== '';\n}\n\nasync function makeTags(\n  solution: Solution,\n  reporter: IssueReporter,\n  options: PublishOptions,\n): Promise<void> {\n  for (const [pkgName, entry] of solution) {\n    if (!entry.impact) {\n      continue;\n    }\n    try {\n      const tag = tagFor(pkgName, entry);\n      const cwd = dirname(entry.pkgJSONPath);\n\n      const preExisting = await doesTagExist(tag);\n\n      if (preExisting) {\n        info(`The tag, ${tag}, has already been pushed up for ${pkgName}`);\n        return;\n      }\n\n      if (options.dryRun) {\n        info(`--dryRun active. Skipping \\`git tag ${tag}\\``);\n        continue;\n      }\n\n      await execa('git', ['tag', tag], {\n        cwd,\n        stderr: 'inherit',\n        stdout: 'inherit',\n      });\n    } catch (err) {\n      console.error(err);\n      reporter.reportFailure(`Failed to create tag for ${pkgName}`);\n    }\n  }\n}\n\nasync function pushTags(reporter: IssueReporter, options: PublishOptions) {\n  if (options.dryRun) {\n    info(`--dryRun active. Skipping \\`git push --tags\\``);\n    return;\n  }\n\n  try {\n    await execa('git', ['push', '--tags']);\n  } catch (err) {\n    reporter.reportFailure(`Failed to git push`);\n  }\n}\n\nfunction chooseRepresentativeTag(solution: Solution): string {\n  for (const [pkgName, entry] of solution) {\n    if (entry.impact) {\n      return tagFor(pkgName, entry);\n    }\n  }\n  process.stderr.write('Found no releasable packages in the plan');\n  process.exit(-1);\n}\n\nasync function getRepo(): Promise<{ owner: string; repo: string }> {\n  const pkgJson = await PackageJson.load('./');\n  const normalisedJson = await pkgJson.normalize({\n    steps: ['fixRepositoryField'],\n  });\n\n  if (!normalisedJson.content.repository) {\n    throw new Error('This package does not have a repository defined');\n  }\n\n  const parsed = parseGithubUrl(\n    (normalisedJson.content.repository as { url: string }).url,\n  );\n\n  if (!parsed) {\n    throw new Error('This package does not have a valid repository');\n  }\n\n  const [user, repo] = parsed;\n  return { owner: user, repo };\n}\n\nasync function doesReleaseExist(\n  octokit: Octokit,\n  tagName: string,\n  reporter: IssueReporter,\n) {\n  try {\n    const { owner, repo } = await getRepo();\n    const response = await octokit.repos.getReleaseByTag({\n      owner,\n      repo,\n      tag: tagName,\n    });\n\n    return response.status === 200;\n  } catch (err) {\n    if (err.status === 404) {\n      return false;\n    }\n    console.error(err.message);\n    reporter.reportFailure(\n      `Problem while checking for existing GitHub release`,\n    );\n  }\n}\n\nasync function createGithubRelease(\n  octokit: Octokit,\n  description: string,\n  tagName: string,\n  reporter: IssueReporter,\n  options: PublishOptions,\n): Promise<void> {\n  try {\n    const preExisting = await doesReleaseExist(octokit, tagName, reporter);\n\n    if (preExisting) {\n      info(`A release with the name '${tagName}' already exists`);\n      return;\n    }\n\n    if (options.dryRun) {\n      info(\n        `--dryRun active. Skipping creating a Release on GitHub for ${tagName}`,\n      );\n      return;\n    }\n\n    const { owner, repo } = await getRepo();\n\n    await octokit.repos.createRelease({\n      owner,\n      repo,\n      tag_name: tagName,\n      body: description,\n    });\n  } catch (err) {\n    console.error(err);\n    reporter.reportFailure(`Problem while creating GitHub release`);\n  }\n}\n\nasync function doesVersionExist(\n  pkgName: string,\n  version: string,\n  reporter: IssueReporter,\n) {\n  try {\n    const latest = await latestVersion(pkgName, { version });\n    return Boolean(latest);\n  } catch (err) {\n    if (\n      err.name === 'VersionNotFoundError' ||\n      err.name === 'PackageNotFoundError'\n    ) {\n      return false;\n    }\n\n    console.error(err.message);\n    reporter.reportFailure(`Problem while checking for existing npm release`);\n  }\n}\n\n/**\n * Call npm publish or pnpm publish on each of the packages in a plan\n *\n * @returns Promise<T> return value only used for testing\n */\nexport async function npmPublish(\n  solution: Solution,\n  reporter: IssueReporter,\n  options: PublishOptions,\n  packageManager: string,\n): Promise<{ args: string[]; released: Map<string, string> }> {\n  const args = ['publish', '--access=public'];\n\n  if (options.otp) {\n    args.push(`--otp=${options.otp}`);\n  }\n\n  if (options.publishBranch) {\n    args.push(`--publish-branch=${options.publishBranch}`);\n  }\n\n  if (options.tag) {\n    args.push(`--tag=${options.tag}`);\n  }\n\n  const released = new Map();\n\n  for (const [pkgName, entry] of solution) {\n    if (!entry.impact) {\n      continue;\n    }\n\n    const preExisting = await doesVersionExist(\n      pkgName,\n      entry.newVersion,\n      reporter,\n    );\n\n    if (preExisting) {\n      info(`${pkgName} has already been publish @ version ${entry.newVersion}`);\n      continue;\n    }\n\n    if (options.dryRun) {\n      info(\n        `--dryRun active. Skipping \\`${packageManager} publish --access=public${\n          options.otp ? ' --otp=*redacted*' : ''\n        }\\` for ${pkgName}, which would publish version ${entry.newVersion}`,\n      );\n\n      released.set(pkgName, entry.newVersion);\n      continue;\n    }\n\n    try {\n      await execa(packageManager, args, {\n        cwd: dirname(entry.pkgJSONPath),\n        stderr: 'inherit',\n        stdout: 'inherit',\n      });\n    } catch (err) {\n      reporter.reportFailure(\n        `Failed to ${packageManager} publish ${pkgName} - Error: ${err.message}`,\n      );\n    }\n  }\n\n  return {\n    args,\n    released,\n  };\n}\n\nfunction packageManager(): string {\n  if (existsSync('./pnpm-lock.yaml')) {\n    return 'pnpm';\n  }\n\n  return 'npm';\n}\n\nexport async function publish(opts: PublishOptions) {\n  if (!opts.skipRepoSafetyCheck) {\n    if (!(await hasCleanRepo())) {\n      process.stderr.write(`You have uncommitted changes.\nTo publish a release you should start from a clean repo. Run \"npx release-plan prepare\", then commit the changes, then come back and run \"npx release-plan publish.\n`);\n      process.exit(-1);\n    }\n  }\n\n  const { solution, description } = loadSolution();\n\n  if (!process.env.GITHUB_AUTH) {\n    process.stderr.write(`\\nYou need to set GITHUB_AUTH.`);\n    process.exit(-1);\n  }\n\n  const octokit = new Octokit({ auth: process.env.GITHUB_AUTH });\n\n  const representativeTag = chooseRepresentativeTag(solution);\n\n  // from this point forward we don't stop if something goes wrong, we just keep\n  // track of whether anything went wrong so we can use the right exit code at\n  // the end.\n  const reporter = new IssueReporter();\n\n  await makeTags(solution, reporter, opts);\n  await npmPublish(solution, reporter, opts, packageManager());\n  await pushTags(reporter, opts);\n  await createGithubRelease(\n    octokit,\n    description,\n    representativeTag,\n    reporter,\n    opts,\n  );\n\n  if (reporter.hadIssues) {\n    process.stderr.write(`\\nSome parts of the release were unsuccessful.\\n`);\n    process.exit(-1);\n  } else {\n    if (opts.dryRun) {\n      success(`--dryRun active. Would have successfully published release!`);\n      return;\n    }\n\n    success(`Successfully published release`);\n  }\n}\n"]}