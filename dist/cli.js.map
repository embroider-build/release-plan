{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport yargs from 'yargs/yargs';\nimport type { Argv } from 'yargs';\n\nimport { readFileSync } from 'fs';\nimport { parseChangeLogOrExit } from './change-parser.js';\nimport { publish } from './publish.js';\n\nyargs(process.argv.slice(2))\n  .usage(\n    `Most of the subcommands in here exist so you can easily test parts of the release process by themselves. To do an actual release, see RELEASE.md.`,\n  )\n  .scriptName('release')\n  .command(\n    'prepare',\n    `Edits the package.json and changelog files to prepare for release.`,\n    (yargs) =>\n      fromStdin(yargs).option('singlePackage', {\n        type: 'string',\n        description:\n          'Allows you to run this command in a non monorepo and define the package name',\n      }),\n    async function (opts) {\n      const { prepare } = await import('./prepare.js');\n      const solution = await prepare(\n        await newChangelogContent(opts),\n        opts.singlePackage,\n      );\n      const { explain } = await import('./plan.js');\n      process.stdout.write(explain(solution));\n      process.stdout.write(`\\nSuccessfully prepared released\\n`);\n    },\n  )\n  .command(\n    'publish',\n    `Publishes an already-prepared released by tagging, pushing tags, creating GitHub release, and publishing to NPM.`,\n    (yargs) =>\n      yargs\n        .option('skipRepoSafetyCheck', {\n          type: 'boolean',\n          description:\n            'Allows you to run \"publish\" even if there are uncommitted changes in your repo. Useful only for developing \"publish\" itself.',\n        })\n        .option('otp', {\n          type: 'string',\n          description: 'This is an OTP that will be passed to npm publish',\n        })\n        .option('dryRun', {\n          type: 'boolean',\n          description:\n            'Run through the release, but log to stdout instead of tagging/pushing/publishing',\n        })\n        .option('publish-branch', {\n          type: 'string',\n          description:\n            '(pnpm) optionally pass on the --publish-branch if you need to publish from a branch other than main|master',\n        })\n        .option('tag', {\n          type: 'string',\n          description: 'pass --tag to npm publish command',\n        }),\n    async function (opts) {\n      await publish(opts);\n    },\n  )\n  .command(\n    'gather-changes',\n    `Uses lerna-changelog to build a description of all the PRs in the release.`,\n    (yargs) => yargs,\n    async function (/* opts */) {\n      const { gatherChanges } = await import('./gather-changes.js');\n      process.stdout.write(await gatherChanges());\n    },\n  )\n  .command(\n    'parse-changes',\n    `Parse the summary of changes into a structured format`,\n    (yargs) => fromStdin(yargs),\n    async function (opts) {\n      const { parseChangeLogOrExit } = await import('./change-parser.js');\n      const publishableNames = await getPublishablePackages();\n\n      console.log(\n        JSON.stringify(\n          parseChangeLogOrExit(\n            await newChangelogContent(opts),\n            publishableNames,\n          ),\n          null,\n          2,\n        ),\n      );\n    },\n  )\n  .command(\n    'discover-deps',\n    `Summarizes how all our published packages relate to each other`,\n    (yargs) => yargs,\n    async function (/* opts */) {\n      const { publishedInterPackageDeps } = await import('./interdep.js');\n      console.log(publishedInterPackageDeps());\n    },\n  )\n  .command(\n    'explain-plan',\n    `Explains which packages need to be released at what versions and why.`,\n    (yargs) =>\n      fromStdin(yargs).option('singlePackage', {\n        type: 'string',\n        description:\n          'Allows you to run this command in a non monorepo and define the package name',\n      }),\n    async function (opts) {\n      const { planVersionBumps, explain } = await import('./plan.js');\n\n      const publishableNames = await getPublishablePackages();\n      const solution = planVersionBumps(\n        parseChangeLogOrExit(await newChangelogContent(opts), publishableNames),\n        opts.singlePackage,\n      );\n      console.log(explain(solution));\n    },\n  )\n  .demandCommand()\n  .strictCommands()\n  .help().argv;\n\nfunction fromStdin(yargs: Argv) {\n  return yargs.option('fromStdin', {\n    type: 'boolean',\n    description:\n      'Read the summary of changes from stdin instead of building them from scratch.',\n  });\n}\n\nasync function getPublishablePackages() {\n  const { getPublishablePackageNames } = await import('./interdep.js');\n\n  return getPublishablePackageNames('./');\n}\n\nasync function newChangelogContent(opts: { fromStdin: boolean | undefined }) {\n  let content: string;\n  if (opts.fromStdin) {\n    content = readFileSync(process.stdin.fd, 'utf8');\n  } else {\n    const { gatherChanges } = await import('./gather-changes.js');\n    content = await gatherChanges();\n  }\n  return content;\n}\n"]}