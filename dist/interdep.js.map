{"version":3,"file":"interdep.js","sourceRoot":"","sources":["../src/interdep.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,OAAO,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;AAWjC,MAAM,UAAU,0BAA0B,CAAC,OAAe;IACxD,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAElD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,OAAe;IACzC,MAAM,QAAQ,GAA0B,IAAI,GAAG,EAAE,CAAC;IAElD,SAAS,WAAW,CAAC,WAAmB;QACtC,MAAM,GAAG,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,GAAG,CAAC,OAAO,EAAE;YACf,OAAO;SACR;QAED,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE;YACrB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,WAAW,EAAE,KAAK,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE;YAC9C,cAAc,EAAE,IAAI,GAAG,EAAE;YACzB,kBAAkB,EAAE,IAAI,GAAG,EAAE;YAC7B,GAAG;SACJ,CAAC,CAAC;IACL,CAAC;IAED,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;IAEvE,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;IAC1E,IAAI,WAAW,EAAE,GAAG,EAAE;QACpB,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC;KACpD;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,yBAAyB;IACvC,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAEnC,KAAK,MAAM,CAAC,YAAY,EAAE,iBAAiB,CAAC,IAAI,QAAQ,EAAE;QACxD,MAAM,eAAe,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAC9C,mEAAmE;QACnE,UAAU;QACV,KAAK,MAAM,OAAO,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAU,EAAE;YACnE,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE;gBAC5B,KAAK,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAC9C,eAAe,CAAC,OAAO,CAA2B,CACnD,EAAE;oBACD,IAAI,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;wBACrC,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBACzC,IAAI,CAAC,UAAU,EAAE;4BACf,MAAM,IAAI,KAAK,CACb,oCAAoC,OAAO,OAAO,YAAY,EAAE,CACjE,CAAC;yBACH;wBACD,MAAM,KAAK,GACT,OAAO,KAAK,cAAc;4BACxB,CAAC,CAAE,gBAA0B;4BAC7B,CAAC,CAAE,oBAA8B,CAAC;wBACtC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,QAAiB,CAAC,CAAC;qBACxD;iBACF;aACF;SACF;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { relative, join } from 'path';\nimport fsExtra from 'fs-extra';\nimport { getPackagesSync } from '@manypkg/get-packages';\n\nconst { readJSONSync } = fsExtra;\nexport type Range = `workspace:${string}`;\n\nexport interface PkgEntry {\n  version: string;\n  pkgJSONPath: string;\n  isDependencyOf: Map<string, Range>;\n  isPeerDependencyOf: Map<string, Range>;\n  pkg: any;\n}\n\nexport function getPublishablePackageNames(rootDir: string): Set<string> {\n  const packages = getPackages(rootDir);\n  const publishableNames = new Set(packages.keys());\n\n  return publishableNames;\n}\n\nexport function getPackages(rootDir: string): Map<string, PkgEntry> {\n  const packages: Map<string, PkgEntry> = new Map();\n\n  function loadPackage(packagePath: string) {\n    const pkg = readJSONSync(packagePath);\n    if (pkg.private) {\n      return;\n    }\n\n    packages.set(pkg.name, {\n      version: pkg.version,\n      pkgJSONPath: `./${relative('.', packagePath)}`,\n      isDependencyOf: new Map(),\n      isPeerDependencyOf: new Map(),\n      pkg,\n    });\n  }\n\n  const { packages: workspaces, rootPackage } = getPackagesSync(rootDir);\n\n  workspaces.forEach((item) => loadPackage(join(item.dir, 'package.json')));\n  if (rootPackage?.dir) {\n    loadPackage(join(rootPackage.dir, 'package.json'));\n  }\n\n  return packages;\n}\n\nexport function publishedInterPackageDeps(): Map<string, PkgEntry> {\n  const packages = getPackages('./');\n\n  for (const [consumerName, packageDefinition] of packages) {\n    const consumerPkgJSON = packageDefinition.pkg;\n    // no devDeps because changes to devDeps shouldn't ever force us to\n    // release\n    for (const section of ['dependencies', 'peerDependencies'] as const) {\n      if (consumerPkgJSON[section]) {\n        for (const [depName, depRange] of Object.entries(\n          consumerPkgJSON[section] as Record<string, string>,\n        )) {\n          if (depRange.startsWith('workspace:')) {\n            const dependency = packages.get(depName);\n            if (!dependency) {\n              throw new Error(\n                `broken \"workspace:\" reference to ${depName} in ${consumerName}`,\n              );\n            }\n            const field =\n              section === 'dependencies'\n                ? ('isDependencyOf' as const)\n                : ('isPeerDependencyOf' as const);\n            dependency[field].set(consumerName, depRange as Range);\n          }\n        }\n      }\n    }\n  }\n  return packages;\n}\n"]}