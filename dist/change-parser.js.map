{"version":3,"file":"change-parser.js","sourceRoot":"","sources":["../src/change-parser.ts"],"names":[],"mappings":"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","sourcesContent":["export type Impact = 'major' | 'minor' | 'patch';\nexport type UnlabeledSection = { unlabeled: true; summaryText: string };\nexport type LabeledSection = {\n  packages: string[];\n  impact: Impact;\n  heading: string;\n};\nexport type Section = LabeledSection | UnlabeledSection;\nexport interface ParsedChangelog {\n  sections: Section[];\n}\n\nconst knownSections: Record<string, { impact: Impact } | { unlabeled: true }> =\n  {\n    ':boom: Breaking Change': {\n      impact: 'major',\n    },\n    ':rocket: Enhancement': {\n      impact: 'minor',\n    },\n    ':bug: Bug Fix': {\n      impact: 'patch',\n    },\n    ':memo: Documentation': {\n      impact: 'patch',\n    },\n    ':house: Internal': {\n      impact: 'patch',\n    },\n    ':question: Unlabeled': {\n      unlabeled: true,\n    },\n    ':present: Additional updates': {\n      unlabeled: true,\n    },\n  };\n\nconst ignoredSections = [/Committers: \\d+/];\n\nfunction sectionHeading(line: string): string | undefined {\n  if (line.startsWith('#### ')) {\n    return line.slice(5);\n  }\n}\n\nfunction stillWithinSection(lines: string[]): boolean {\n  return lines.length > 0 && !sectionHeading(lines[0]);\n}\n\nfunction consumeSection(lines: string[]) {\n  const matchedLines = [];\n  while (stillWithinSection(lines)) {\n    matchedLines.push(lines.shift());\n  }\n  return matchedLines;\n}\n\nfunction parseSection(\n  lines: string[],\n  publishableNames: Set<string>,\n): Section | undefined {\n  const line = lines.shift();\n  const heading = line ? sectionHeading(line) : undefined;\n  if (!heading) {\n    return;\n  }\n\n  const sectionConfig = knownSections[heading];\n  if (!sectionConfig) {\n    if (ignoredSections.some((pattern) => pattern.test(heading))) {\n      consumeSection(lines);\n      return;\n    }\n    throw new Error(`unexpected section: ${heading}`);\n  }\n\n  if ('unlabeled' in sectionConfig) {\n    const relevantLines = filteredUnlabeled(lines, publishableNames);\n\n    if (relevantLines.length) {\n      const consumed = consumeSection(relevantLines);\n\n      return { unlabeled: true, summaryText: consumed.join('\\n') };\n    } else {\n      return;\n    }\n  }\n\n  const packages = new Set<string>();\n  while (stillWithinSection(lines)) {\n    const packageList = parsePackageList(lines);\n    if (packageList) {\n      for (const pkg of packageList) {\n        if (publishableNames.has(pkg)) {\n          packages.add(pkg);\n        }\n      }\n    }\n  }\n\n  return {\n    packages: [...packages],\n    impact: sectionConfig.impact,\n    heading,\n  };\n}\n\nfunction filteredUnlabeled(\n  lines: string[],\n  publishableNames: Set<string>,\n): string[] {\n  const relevant = [];\n  let skipWholeList = false;\n\n  for (const line of lines) {\n    if (line === '* Other') continue;\n    if (line.startsWith('*')) {\n      const packageNames = parsePackageList([line]);\n      if (!packageNames) continue;\n\n      const relevantNames = packageNames.filter((name) =>\n        publishableNames.has(name),\n      );\n\n      if (relevantNames.length === 0) {\n        skipWholeList = true;\n        continue;\n      }\n\n      skipWholeList = false;\n\n      relevant.push(`* ${relevantNames.map((x) => `\\`${x}\\``).join(', ')}`);\n      continue;\n    }\n\n    if (!skipWholeList) {\n      relevant.push(line);\n    }\n  }\n\n  return relevant;\n}\n\nfunction parsePackageList(lines: string[]): string[] | undefined {\n  const line = lines.shift();\n  if (!line) {\n    return;\n  }\n  if (line === '* Other') {\n    return;\n  }\n  if (line.startsWith('* `')) {\n    const parts = line.slice(2).split(/,\\s*/);\n    if (!parts.every((p) => p.startsWith('`') && p.endsWith('`'))) {\n      throw new Error(`don't understand this line: ${line}.`);\n    }\n    return parts.map((p) => p.slice(1, -1));\n  }\n}\n\nexport function parseChangeLog(\n  src: string,\n  publishableNames: Set<string>,\n): ParsedChangelog {\n  const lines = src.split('\\n');\n  const sections = [];\n  while (lines.length > 0) {\n    const section = parseSection(lines, publishableNames);\n    if (section) {\n      sections.push(section);\n    }\n  }\n  return { sections };\n}\n\nexport function parseChangeLogOrExit(\n  src: string,\n  publishableNames: Set<string>,\n): ParsedChangelog {\n  try {\n    return parseChangeLog(src, publishableNames);\n  } catch (err) {\n    console.error(err);\n    console.error(`the full changelog that failed to parse was:\\n${src}`);\n    process.exit(-1);\n  }\n}\n"]}